name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  push:
    branches: ["main"]
  workflow_dispatch:
  repository_dispatch:
    types: [deploy-jekyll] # Triggered by Automate Reports Workflow

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Copy Tracking Data to Assets Directory
      - name: Copy Tracking Data
        run: |
          echo "Clearing and copying latest tracking files..."
          rm -rf assets/tracking_data/*
          mkdir -p assets/tracking_data

          echo "Contents of tracking_data before processing:"
          ls -la tracking_data || echo "tracking_data directory is empty"

          # Identify the two newest files
          NEWEST_FILES=$(ls tracking_data/* | grep -E "tracking_report_[0-9]{4}-[0-9]{2}-[0-9]{2}" | sort -r | head -n 2)
          echo "Newest files to copy:"
          echo "${NEWEST_FILES}"

          # Copy the newest files to the assets directory
          for FILE in ${NEWEST_FILES}; do
            cp "$FILE" assets/tracking_data/
          done

          echo "Contents of assets/tracking_data after processing:"
          ls -la assets/tracking_data || echo "assets/tracking_data directory is empty"

      # Step 3: Update index.md with the Latest Files
      - name: Update Index with Latest Files
        run: |
          echo "Updating index.md with latest file links..."
          LATEST_CSV=$(ls -t assets/tracking_data/*.csv 2>/dev/null | head -n 1 | xargs -n 1 basename || echo "No CSV file found")
          LATEST_TXT=$(ls -t assets/tracking_data/*.txt 2>/dev/null | head -n 1 | xargs -n 1 basename || echo "No TXT file found")

          # Write the initial part of the index.md
          echo "---" > index.md
          echo "layout: default" >> index.md
          echo "title: Tracking Data" >> index.md
          echo "---" >> index.md
          echo "" >> index.md
          echo "# Daily Tracking Reports" >> index.md
          echo "" >> index.md
          echo "Download the latest tracking data below:" >> index.md
          echo "" >> index.md
          echo "- [CSV Report](/labelbox-tracking/assets/tracking_data/${LATEST_CSV})" >> index.md
          echo "- [TXT Report](/labelbox-tracking/assets/tracking_data/${LATEST_TXT})" >> index.md
          echo "" >> index.md

          # Append the JavaScript and additional content
          cat << 'EOF' >> index.md
<a href="#" id="refresh-link">Refresh Data</a>
<p id="status-message"></p>

{% raw %}
<script>
  document.getElementById("refresh-link").addEventListener("click", async (event) => {
    event.preventDefault(); // Prevent the link from navigating away

    const statusMessage = document.getElementById("status-message");
    statusMessage.textContent = "Refreshing data...";

    try {
      const response = await fetch("https://api.github.com/repos/dollysods/labelbox-tracking/dispatches", {
        method: "POST",
        headers: {
          "Accept": "application/vnd.github.v3+json"
        },
        body: JSON.stringify({
          event_type: "trigger-refresh" // Matches the event type in the workflow
        }),
      });

      if (response.ok) {
        statusMessage.textContent = "Workflow triggered successfully!";
      } else {
        statusMessage.textContent = `Failed to trigger workflow: ${response.statusText}`;
      }
    } catch (error) {
      statusMessage.textContent = `Error: ${error.message}`;
    }
  });
</script>
{% endraw %}
EOF

      # Step 4: Debug Updated Index
      - name: Debug Updated Index
        run: |
          echo "Contents of index.md:"
          cat index.md

      # Step 5: Build with Jekyll
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      # Step 6: Debug Jekyll Build Output
      - name: Debug Jekyll Build Output
        run: |
          echo "Contents of the build output directory (_site):"
          ls -la _site/assets/tracking_data || echo "assets/tracking_data not found in _site"

      # Step 7: Upload Artifact for Deployment
      - name: Upload Artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Step 8: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
